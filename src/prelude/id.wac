fn __WAC_id_value(x i64) i32 {
    $asm([], i32, r#"
        local.get $l_0_x
        i32.wrap_i64
    "#)
}

fn __WAC_raw_id_to_i32(x i64) i32 {
    var typ = __WAC_typeof_raw(x)
    if typ is i32 {
        __WAC_id_value(x)
    } else {
        panic("Expected i32")
        0
    }
}

fn __WAC_raw_id_to_f32(x i64) f32 {
    var typ = __WAC_typeof_raw(x)
    if typ is f32 {
        __WAC_id_value(x)
    } else {
        panic("Expected f32")
        0.0
    }
}

fn __WAC_raw_id_to_bool(x i64) i32 {
    var typ = __WAC_typeof_raw(x)
    if typ is bool {
        __WAC_id_value(x)
    } else {
        panic("Expected bool")
        0
    }
}

fn __WAC_raw_id_to_str(x i64) i32 {
    var typ = __WAC_typeof_raw(x)
    if typ is str {
        __WAC_id_value(x)
    } else {
        panic("Expected str")
        0
    }
}

fn __WAC_raw_id_to_list(x i64) i32 {
    var typ = __WAC_typeof_raw(x)
    if typ is list {
        __WAC_id_value(x)
    } else {
        panic("Expected list")
        0
    }
}

fn __WAC_id_release(x i64) {
    var tag = __WAC_typeof_raw(x)
    var val = __WAC_id_value(x)
    if (
        tag is i32 or
        tag is i64 or
        tag is f32 or
        tag is f64 or
        tag is bool
    ) {
        # these are primitives, so nothing more to do here
    } else if tag is str {
        __WAC_str_release(val)
    } else {
        panic("id_release: unrecognized tag")
    }
}

fn __WAC_id_retain(x i64) {
    var tag = __WAC_typeof_raw(x)
    var val = __WAC_id_value(x)

    if (
        tag is i32 or
        tag is i64 or
        tag is f32 or
        tag is f64 or
        tag is bool
    ) {
        # these are primitives, so nothing more to do here
    } else if tag is str {
        __WAC_str_retain(val)
    } else {
        panic("id_retain: unrecognized tag")
    }
}
