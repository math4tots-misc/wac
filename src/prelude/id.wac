fn __WAC_id_value[notrace](x i64) i32 {
    $asm([], i32, r#"
        local.get $l_0_x
        i32.wrap_i64
    "#)
}

fn __WAC_ptr_retain[notrace](ptr i32) {
    __write(ptr, __read(ptr) + 1)
}

fn __WAC_raw_id_to_i32[notrace](x i64) i32 {
    var typ = __WAC_typeof_raw(x)
    if typ is i32 {
        __WAC_id_value(x)
    } else {
        NoTracePanic("Expected i32")
    }
}

fn __WAC_raw_id_to_f32[notrace](x i64) f32 {
    var typ = __WAC_typeof_raw(x)
    if typ is f32 {
        $asm([__WAC_id_value(x)], f32, "f32.reinterpret_i32")
    } else {
        NoTracePanic("Expected f32")
    }
}

fn __WAC_raw_id_to_bool[notrace](x i64) i32 {
    var typ = __WAC_typeof_raw(x)
    if typ is bool {
        __WAC_id_value(x)
    } else {
        NoTracePanic("Expected bool")
    }
}

fn __WAC_raw_id_to_type[notrace](x i64) i32 {
    var typ = __WAC_typeof_raw(x)
    if typ is type {
        __WAC_id_value(x)
    } else {
        NoTracePanic("Expected type")
    }
}

fn __WAC_raw_id_to_str[notrace](x i64) i32 {
    var typ = __WAC_typeof_raw(x)
    if typ is str {
        __WAC_id_value(x)
    } else {
        NoTracePanic("Expected str")
    }
}

fn __WAC_raw_id_to_list[notrace](x i64) i32 {
    var typ = __WAC_typeof_raw(x)
    if typ is list {
        __WAC_id_value(x)
    } else {
        NoTracePanic("Expected list")
    }
}

fn __WAC_id_release[notrace](x i64) {
    var tag = __WAC_typeof_raw(x)
    var val = __WAC_id_value(x)
    if (
        tag is i32 or
        tag is f32 or
        tag is type or
        tag is bool
    ) {
        # these are primitives, so nothing more to do here
    } else if tag is str {
        __WAC_str_release(val)
    } else if tag is list {
        __WAC_list_release(val)
    } else if __type_is_enum($asm([tag], type, "")) {
        # enum types don't allocate data
    } else {
        NoTracePanic("id_release: unrecognized tag")
    }
}

fn __WAC_id_retain[notrace](x i64) {
    var tag = __WAC_typeof_raw(x)
    var val = __WAC_id_value(x)

    if (
        tag is i32 or
        tag is f32 or
        tag is type or
        tag is bool
    ) {
        # these are primitives, so nothing more to do here
    } else if tag is str or tag is list {
        __WAC_ptr_retain(val)
    } else if __type_is_enum($asm([tag], type, "")) {
        # enum types don't allocate data
    } else {
        NoTracePanic("id_retain: unrecognized tag")
    }
}
