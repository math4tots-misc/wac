fn __i32_str(i i32) str {
    if i is 0 {
        '0'
    } else {
        var is_negative = false

        if i < 0 {
            is_negative = true
            i = -i
        }

        var parts = []

        while i > 0 {
            var digit = i % 10

            var ch = if digit is 0 {
                '0'
            } else if digit is 1 {
                '1'
            } else if digit is 2 {
                '2'
            } else if digit is 3 {
                '3'
            } else if digit is 4 {
                '4'
            } else if digit is 5 {
                '5'
            } else if digit is 6 {
                '6'
            } else if digit is 7 {
                '7'
            } else if digit is 8 {
                '8'
            } else if digit is 9 {
                '9'
            } else {
                NoTracePanic('impossible digit')
            }

            i = i // 10
            Push(parts, ch)
        }

        if is_negative {
            Push(parts, '-')
        }

        Reverse(parts)
        Join("", parts)
    }
}
