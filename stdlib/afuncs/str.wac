# str layout:
#   [refcnt i32][len(bytes) i32][utf8...]
#


fn str.LessThan(self, other str) bool {
    var alen = self.Size()
    var blen = other.Size()
    var len = if alen < blen { alen } else { blen }
    var done = false
    var ret = false
    var i = 0
    while !done and i < len {
        var a = self.Byte(i)
        var b = other.Byte(i)

        if a != b {
            done = true
            ret = a < b
        }

        i = i + 1
    }

    if done {
        ret
    } else {
        alen < blen
    }
}

fn str.Size(self) i32 {
    # Gets the length of the given string
    # (i.e. number of bytes in its utf8 representation)
    var ptr = $asm([], i32, "local.get $l_0_self")
    $read4(ptr + 4)
}

# Gets the byte at the given index
fn str.Byte(self, index i32) i32 {
    var len = self.Size()
    var index = __index(index, len)
    var buffer = __WAC_str_buffer(self)
    $read1(buffer + index)
}
