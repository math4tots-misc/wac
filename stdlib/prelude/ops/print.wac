fn Print(x id) {
    __print_str(str(x))
}

fn PrintErr(x id) {
    __eprint_str(str(x))
}

fn Panic(s str) noreturn {
    NoTracePanic(s)
}

# Like Panic, but won't leave an entry in the stack trace when called
fn NoTracePanic[notrace](s str) noreturn {
    __WAC_eprint_stack()

    __eprint0_str("PANIC: ")
    __eprint0_str(s)
    __eprint0_str("\n")

    $asm([], noreturn, "unreachable")
}

# We special-case printing a single integer, because:
#     * printing line numbers is required when printing the stacktrace
#         on panic
#     * I want to be able to debug malloc/free.
#         To do so, I want to avoid calling malloc/free when
#         dumping the stack trace
#     * the normal '__i32_str' implementation requires
#         calling malloc, both to create a temporary list,
#         and also to
# printing the stacktrace, and printing the stacktrace should not
# depend on malloc/free (this is to support debugging malloc/free)
fn __eprint0_i32[notrace](signed_x i32) {
    var negative = signed_x < 0
    var abs_x = if negative { -signed_x } else { signed_x }

    if negative {
        __eprint0_str('-')
    }

    var i = 9
    while i >= 0 {
        if abs_x >= (10).Pow(i) {
            __eprint0_str(switch (abs_x // (10).Pow(i)) % 10 {
                0 => '0'
                1 => '1'
                2 => '2'
                3 => '3'
                4 => '4'
                5 => '5'
                6 => '6'
                7 => '7'
                8 => '8'
                9 => '9'
            })
        }
        i = i - 1
    }
}
