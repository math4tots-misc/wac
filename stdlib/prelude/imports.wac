# Some basic language imports

# import fn "lang" "print0_str_raw" __print0_str_raw[notrace](len i32, ptr i32)
# import fn "lang" "eprint0_str_raw" __eprint0_str_raw[notrace](len i32, ptr i32)
import fn "lang" "write_raw" __write_raw[notrace](fd i32, len i32, ptr i32) i32

fn __eprint0_str_raw[notrace](len i32, ptr i32) {
    __write_raw(2, len, ptr)
}

fn __print0_str_raw[notrace](len i32, ptr i32) {
    __write_raw(1, len, ptr)
}

# We define the entrypoint to be __start so that main can be private
fn[pub] __start() i32 {
    Main()
    0
}

fn __read[notrace](ptr i32) i32 {
    $asm([ptr], i32, "i32.load")
}

fn __write[notrace](ptr i32, value i32) {
    $asm([ptr, value], void, "i32.store")
}

fn __read_i64[notrace](ptr i32) i64 {
    $asm([ptr], i64, "i64.load")
}

fn __write_i64[notrace](ptr i32, value i64) {
    $asm([ptr, value], void, "i64.store")
}

fn __read_u8[notrace](ptr i32) i32 {
    $asm([ptr], i32, "i32.load8_u")
}

fn __write_u8[notrace](ptr i32, value i32) {
    $asm([ptr, value], void, "i32.store8")
}

fn __read_u16[notrace](ptr i32) i32 {
    $asm([ptr], i32, "i32.load16_u")
}

fn __write_u16[notrace](ptr i32, value i32) {
    $asm([ptr, value], void, "i32.store16")
}
