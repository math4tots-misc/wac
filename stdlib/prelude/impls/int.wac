fn __i32_str[notrace](i i32) str {
    if i is 0 {
        '0'
    } else {
        var is_negative = false

        if i < 0 {
            is_negative = true
            i = -i
        }

        var parts = []

        while i > 0 {
            var digit = i % 10

            var ch = switch digit {
                0 => '0'
                1 => '1'
                2 => '2'
                3 => '3'
                4 => '4'
                5 => '5'
                6 => '6'
                7 => '7'
                8 => '8'
                9 => '9'
                _ => NoTracePanic('impossible digit')
            }

            i = i // 10
            __list_push(parts, ch)
        }

        if is_negative {
            __list_push(parts, '-')
        }

        __list_reverse(parts)
        __str_join("", parts)
    }
}

fn i32.Pow[notrace](self, n i32) i32 {
    var ret = 1
    for _ in 0..n {
        ret = ret * self
    }
    ret
}
