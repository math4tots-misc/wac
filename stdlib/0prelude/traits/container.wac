
##############################################################################
# SizeOf
#
# Get the number of elements in a container
# (e.g. list)
#
# For strings, this gives you the number
# of bytes, not the number of chars!
#
##############################################################################
trait SizeOf(self) i32

impl bytes for SizeOf(self) i32 {
    __bytes_len(self)
}

impl str for SizeOf(self) i32 {
    __strlen(self)
}

impl list for SizeOf(self) i32 {
    __listlen(self)
}

##############################################################################
# Extend
#
# Push the values in other to self
#
##############################################################################
trait Extend(self, other id)

impl list for Extend(self, other id) {
    var other list = other
    var len = __listlen(other)
    for i in 0..len {
        __list_push(self, __list_getitem(other, i))
    }
}

##############################################################################
# Push
#
# Add an element to the end of a container
# (e.g. list)
#
##############################################################################
trait Push(self, item id)

impl list for Push(self, item id) {
    __list_push(self, item)
}

##############################################################################
# Pop
#
# Remove an element from the end of a container
# (e.g. list)
#
##############################################################################
trait Pop(self) id

impl list for Pop(self) id {
    __list_pop(self)
}

##############################################################################
# GetItem
#
# Get an item from a container with an index
# (e.g. list or map)
#
##############################################################################
trait GetItem(self, index id) id

impl str for GetItem(self, index id) id {
    self.Byte(index)
}

impl bytes for GetItem(self, index id) id {
    __bytes_getitem(self, index)
}

impl list for GetItem(self, index id) id {
    __list_getitem(self, index)
}

##############################################################################
# SetItem
#
# Get an item from a container with an index
# (e.g. list or map)
#
##############################################################################
trait SetItem(self, index id, value id)

impl bytes for SetItem(self, index id, value id) {
    __bytes_setitem(self, index, value)
}

impl list for SetItem(self, index id, value id) {
    __list_setitem(self, index, value)
}

##############################################################################
# Reverse
#
# Reverse an ordered container
#
##############################################################################
trait Reverse(self)

impl list for Reverse(self) {
    __list_reverse(self)
}

##############################################################################
# Reversed
#
# Like Reverse, but creates a new value
#
# == Implementation notes ==
# the default implementation of Reversed will
# use Clone and Reverse.
#
##############################################################################
trait Reversed(self) id

impl id for Reversed(self) id {
    var ret = Clone(self)
    Reverse(ret)
    ret
}

##############################################################################
# Join
#
# Given a separator (self) and a list of items,
# join them together based on the type of the
# separator
#
##############################################################################
trait Join(self, items list) id

impl str for Join(self, items list) id {
    __str_join(self, items)
}

##############################################################################
# Slice
##############################################################################
trait Slice(self, start i32, end i32) id

impl str for Slice(self, start i32, end i32) id {
    __str_slice(self, start, end)
}

##############################################################################
# OpenSlice
#
# Like Slice, but allows you to omit the
# 'end' index (the entire SizeOf(self) is
# assumed)
##############################################################################
fn OpenSlice(self id, start i32) id {
    Slice(self, start, SizeOf(self))
}
