fn __test_str_eq() {
    Assert(Eq("hello", "hello"))
}

fn __test_str_join() {
    var s = 'abcd'
    Assert(__str_eq(Join('', ['a', 'b', 'c', 'd']), 'abcd'))
    Assert(Join('', ['a', 'b', 'c', 'd']) == 'abcd')
    Assert(Join('x', ['a', 'b', 'c']) == 'axbxc')
    Assert(Join(' ', ['11', 'b', 'c']) == '11 b c')

    var i = 0
    var parts = []
    while i < 1000 {
        var item = if i % 100 is 0 {
            "\n"
        } else if i % 2 is 0 {
            " "
        } else {
            "1"
        }
        Push(parts, item)
        i = i + 1
    }
    Push(parts, '\n')
    var s = r#"
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
"#
    Assert(s == Join("", parts))

    AssertEq(__str_join('', ['abc']), 'abc')
    AssertEq(__str_join('abc', []), '')
}

fn __test_str_slice() {
    Assert(OpenSlice("hello", 1) == "ello")
    Assert(Slice("hello", 1, -1) == "ell")
    Assert(Slice("hello world", 0, 5) == "hello")
    Assert(Slice("hello world", 0, 4) == "hell")
    Assert(Slice("hello world", 0, -1) == "hello worl")
}

fn __test_size_of_unicode() {
    # note, SizeOf for str counts number of bytes
    AssertEq(SizeOf('世界'), 6)

    var s = Join("😊", ['한글', 'Россия'])
    AssertEq(s, '한글😊Россия')
    AssertEq(SizeOf(s), 22)
}

fn __test_str_format() {
    var s = "Hello %s" % ["world"]
    AssertEq(s, "Hello world")

    s = "before..%s..%safter" % ['aaa', 'bbb']
    AssertEq(s, 'before..aaa..bbbafter')

    s = "%sbefore..%s..after" % ['aaa', 'bbb']
    AssertEq(s, 'aaabefore..bbb..after')

    s = "hello" % []
    AssertEq(s, 'hello')
}

fn __test_str_less_than() {
    Assert('hello' < 'zz')
}
