fn __test_switch_i32() {
    var x = __for_test_switch_i32_get(1)
    AssertEq(x, 'one')
    x = __for_test_switch_i32_get(2)
    AssertEq(x, 'two')
    x = __for_test_switch_i32_get(3)
    AssertEq(x, 'three')
    x = __for_test_switch_i32_get(4)
    AssertEq(x, 'other')
}

fn __for_test_switch_i32_get(i i32) str {
    switch i {
        1 => "one"
        2 => "two"
        3 => "three"
        _ => "other"
    }
}

fn __test_switch_enum() {
    var x = __for_test_switch_enum_get(ForTestSwitchEnum.A)
    AssertEq(x, "first")
    x = __for_test_switch_enum_get(ForTestSwitchEnum.B)
    AssertEq(x, "second")
    x = __for_test_switch_enum_get(ForTestSwitchEnum.C)
    AssertEq(x, "third")
}

fn __for_test_switch_enum_get(e ForTestSwitchEnum) str {
    switch e {
        ForTestSwitchEnum.A => "first"
        ForTestSwitchEnum.B => "second"
        ForTestSwitchEnum.C => "third"
    }
}

enum ForTestSwitchEnum {
    A,
    B,
    C,
}

fn __test_type_switch() {
    var x = __for_test_type_switch_get(type)
    AssertEq(x, 'got type')
    x = __for_test_type_switch_get(i32)
    AssertEq(x, 'got int type i32')
    x = __for_test_type_switch_get(i64)
    AssertEq(x, 'got int type i64')
    x = __for_test_type_switch_get(ForTestSwitchEnum)
    AssertEq(x, 'hey ForTestSwitchEnum')
    x = __for_test_type_switch_get(f32)
    AssertEq(x, 'some other type f32')
}

fn __for_test_type_switch_get(t type) str {
    switch t {
        i32 | i64 => F("got int type %s", [t])
        type => "got type"
        ForTestSwitchEnum => "hey ForTestSwitchEnum"
        _ => F("some other type %s", [t])
    }
}

fn __test_switch_with_ops() {
    var result = switch 10 {
        (5 + 5) => '10 -> 5 + 5'
        _ => 'other'
    }
    AssertEq(result, '10 -> 5 + 5')

    var result = switch -17 {
        (-20 + 3) => 'aaaa'
        _ => 'other'
    }
    AssertEq(result, 'aaaa')
}
